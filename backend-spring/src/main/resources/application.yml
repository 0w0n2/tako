server:
  port: ${SERVER_PORT}

swagger:
  uri: ${SWAGGER_URI}

spring:
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: "${REDIS_PASSWORD}"

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: "${DB_PASSWORD}"
    driver-class-name: ${DB_DRIVER}

  jpa:
    hibernate:
      ddl-auto: ${JPA_HIBERNATE_DDL}
    show-sql: ${JPA_SHOW_SQL}
    properties:
      hibernate:
        format_sql: ${JPA_FORMAT_SQL}

  batch:
    job:
      enabled: ${BATCH_JOB_ENABLED}
    jdbc:
      initialize-schema: ${BATCH_JDBC_SCHEMA}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - email
            redirect-uri: "${OAUTH2_REDIRECT_URI}"
security:
  jwt:
    secret-key: ${SECURITY_JWT_SECRET_KEY}
    expire-time:
      access-token: ${SECURITY_JWT_EXPIRE_TIME_ACCESS}
      refresh-token: ${SECURITY_JWT_EXPIRE_TIME_REFRESH}

  whitelist:
    GET: ${SECURITY_WHITELIST_GET}
    POST: ${SECURITY_WHITELIST_POST}
    PUT: ${SECURITY_WHITELIST_PUT}
    DELETE: ${SECURITY_WHITELIST_DELETE}
    PATCH: ${SECURITY_WHITELIST_PATCH}
    OPTIONS: ${SECURITY_WHITELIST_OPTION}

  cors:
    allowed-origins: ${SECURITY_CORS_ALLOWED_ORIGINS}
    allowed-methods: ${SECURITY_CORS_ALLOWED_METHODS}
    allowed-headers: ${SECURITY_CORS_ALLOWED_HEADERS}
    allow-credentials: ${SECURITY_CORS_ALLOWED_CREDENTIALS}
    exposed-headers: ${SECURITY_CORS_EXPOSED_HEADERS}
    max-age: ${SECURITY_CORS_MAX_AGE}

  oauth2:
    authorize-uri: ${SECURITY_OAUTH2_AUTHORIZE_URI}
    redirect-uri: ${SECURITY_OAUTH2_REDIRECT_URI}

    client-redirect-uri: ${SECURITY_OAUTH2_CLIENT_REDIRECT_URI}
    
# expire-time: # 나중에 만료 시간 등 설정할 때 사용할 것