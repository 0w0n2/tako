server:
  port: ${SERVER_PORT}
  tomcat:
    max-swallow-size: -1 # 남은 바디를 끝까지 삼켜서 응답을 바로 보냄

swagger:
  uri: ${SWAGGER_URI}

springdoc:
  swagger-ui:
    tags-sorter: alpha
    operations-sorter: alpha

db:
  init:
    fulltext: ${DB_INIT_FULLTEXT}

spring:
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: "${REDIS_PASSWORD}"

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: "${DB_PASSWORD}"
    driver-class-name: ${DB_DRIVER}
    hikari:
      connection-init-sql: "SET time_zone = '+00:00'"
      maximum-pool-size: 40 # 최대 커넥션 수
      minimum-idle: 10 # 최소 유휴 커넥션 수
      idle-timeout: 300000 # 5분
      max-lifetime: 540000 # 9분
      keepalive-time: 240000 # 4분 (idle 커넥션 주기적 ping)
      connection-timeout: 10000 # 10초
      leak-detection-threshold: 20000 # 20초

  jackson:
    time-zone: UTC
  jpa:
    hibernate:
      ddl-auto: ${JPA_HIBERNATE_DDL}
    show-sql: ${JPA_SHOW_SQL}
    properties:
      hibernate:
        format_sql: ${JPA_FORMAT_SQL}
        jdbc:
          time_zone: UTC
  batch:
    job:
      enabled: ${BATCH_JOB_ENABLED}
    jdbc:
      initialize-schema: ${BATCH_JDBC_SCHEMA}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - email
            redirect-uri: "${OAUTH2_REDIRECT_URI}"
  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY}
        secret-key: ${AWS_SECRET_KEY}
      region:
        static: ${AWS_REGION_STATIC}
      s3:
        bucket: ${AWS_S3_BUCKET}
  servlet:
    multipart:
      max-file-size: 50MB # 전체 타입 중 가장 큰 per-file 상한
      max-request-size: 50MB # 전체 타입 중 가장 큰 per-request 상한
      resolve-lazily: true
  mail:
    host: ${SMTP_HOST}
    port: ${SMTP_PORT}
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
auction:
  extension:
    enabled: true
    threshold-seconds: 300 # 마감 300초 이내면
    extend-by-seconds: 60 # 60초 연장
  sse:
    heartbeat-ms: 15000 # SSE 하트비트 주기(밀리초)
  finalize:
    tick-ms: 1000 # 스케줄 주기
    batch-size: 500 # 한 번에 가져올 최대 개수
    max-tick-ms: 4000 # 한 번의 tick에서 써도 되는 최대 시간(밀리초)
    parallelism: 1 # 동시 처리 스레드 수(1=순차)
  deadline:
    bootstrap:
      enabled: true
      days: 14
    reconcile:
      enabled: true
      cron: "0 */5 * * * *"

delivery:
  auto-complete:
    min-minutes: ${DELIVERY_AUTO_COMPLETE_MIN_MINUTES:2}

security:
  jwt:
    secret-key: ${SECURITY_JWT_SECRET_KEY}
    expire-time:
      access-token: ${SECURITY_JWT_EXPIRE_TIME_ACCESS}
      refresh-token: ${SECURITY_JWT_EXPIRE_TIME_REFRESH}

  whitelist:
    GET: ${SECURITY_WHITELIST_GET},${SECURITY_WHITELIST_GET_SWAGGER},${SECURITY_WHITELIST_GET_AUTH},${SECURITY_WHITELIST_GET_OAUTH},${SECURITY_WHITELIST_GET_NOTICE},${SECURITY_WHITELIST_GET_CATEGORY},${SECURITY_WHITELIST_GET_CARD},${SECURITY_WHITELIST_GET_AUCTION},${SECURITY_WHITELIST_GET_MEMBER},${SECURITY_WHITELIST_GET_GAME},${SECURITY_WHITELIST_GET_POPULARITY},${SECURITY_WHITELIST_GET_INQUIRY},${SECURITY_WHITELIST_GET_LIVE}
    POST: ${SECURITY_WHITELIST_POST},${SECURITY_WHITELIST_POST_AUTH}
    PUT: ${SECURITY_WHITELIST_PUT}
    DELETE: ${SECURITY_WHITELIST_DELETE}
    PATCH: ${SECURITY_WHITELIST_PATCH},${SECURITY_WHITELIST_PATCH_AUTH}
    OPTIONS: ${SECURITY_WHITELIST_OPTION}

  cors:
    allowed-origins: ${SECURITY_CORS_ALLOWED_ORIGINS}
    allowed-methods: ${SECURITY_CORS_ALLOWED_METHODS}
    allowed-headers: ${SECURITY_CORS_ALLOWED_HEADERS}
    allow-credentials: ${SECURITY_CORS_ALLOW_CREDENTIALS}
    exposed-headers: ${SECURITY_CORS_EXPOSED_HEADERS}
    max-age: ${SECURITY_CORS_MAX_AGE}

  role:
    admin: ${SECURITY_ROLE_ADMIN}

  oauth2:
    authorize-uri: ${SECURITY_OAUTH2_AUTHORIZE_URI}
    redirect-uri: ${SECURITY_OAUTH2_REDIRECT_URI}
    client-redirect-uri: ${SECURITY_OAUTH2_CLIENT_REDIRECT_URI}

# expire-time: # 나중에 만료 시간 등 설정할 때 사용할 것
# 인기도 관련 설정
popularity:
  weight:
    view: ${POPULARITY_WEIGHT_VIEW} # 조회 가중치 (double).
    bid: ${POPULARITY_WEIGHT_BID} # 입찰 가중치 (double).
  bucket:
    ttl-minutes: ${POPULARITY_BUCKET_TTL_MINUTES} # 분 버킷 TTL.

logging:
  charset:
    console: EUC-KR
    file: EUC-KR
  level:
    com.bukadong.tcg.api.notification: DEBUG
    com.bukadong.tcg.api.bid.service.BidEventApplyService: DEBUG
    com.bukadong.tcg.api.media.service.MediaPresignQueryService: DEBUG
    com.bukadong.tcg.api.inquiry.service.InquiryQueryService: DEBUG
    com.bukadong.tcg.api.inquiry.service.InquiryCommandService: DEBUG
    com.bukadong.tcg.api.inquiry.controller.InquiryController: DEBUG
    com.bukadong.tcg.api.inquiry.controller.MyInquiryController: DEBUG
    com.bukadong.tcg.api.card.repository.custom.CardRepositoryImpl: DEBUG
    com.bukadong.tcg.global.util.RedisUtils: DEBUG
    com.bukadong.tcg.global.util.S3Uploader: DEBUG
    com.bukadong.tcg.api.media.guard.MediaUploadGuard: DEBUG
    com.bukadong.tcg.api.fcm.service.FcmPushService: DEBUG
    org.springframework.data.redis: INFO
    io.lettuce.core: INFO

app:
  web-url:
    main: ${APP_WEB_URL_MAIN}
    logo: ${APP_WEB_URL_LOGO}

  upload:
    limits:
      MEMBER_PROFILE:
        per-file: 2MB
        per-request: 5MB
        max-count: 1
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]
      MEMBER_BACKGROUND:
        per-file: 5MB
        per-request: 10MB
        max-count: 1
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]

      AUCTION_ITEM:
        per-file: 8MB
        per-request: 30MB
        max-count: 10
        allowed-mimes: [image/jpeg, image/png, image/webp, video/mp4]
        allowed-exts: [jpg, jpeg, png, webp, mp4]
        # 이미지 규격 제한이 필요 없으면 image 블록 생략 가능

      CARD:
        per-file: 5MB
        per-request: 30MB
        max-count: 10
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]

      CATEGORY_MAJOR:
        per-file: 2MB
        per-request: 6MB
        max-count: 1
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]

      CATEGORY_MEDIUM:
        per-file: 2MB
        per-request: 6MB
        max-count: 1
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]

      AUCTION_AI:
        per-file: 8MB
        per-request: 30MB
        max-count: 10
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]

      AUCTION_REVIEW:
        per-file: 8MB
        per-request: 30MB
        max-count: 10
        allowed-mimes: [image/jpeg, image/png, image/webp, video/mp4]
        allowed-exts: [jpg, jpeg, png, webp, mp4]

      NOTICE:
        per-file: 5MB
        per-request: 20MB
        max-count: 3
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]

      NOTICE_ATTACHMENT:
        per-file: 10MB
        per-request: 40MB
        max-count: 5
        allowed-mimes: [image/jpeg, image/png, image/webp, application/pdf, application/zip, application/x-zip-compressed]
        allowed-exts: [jpg, jpeg, png, webp, pdf, zip]

      INQUIRY:
        per-file: 5MB
        per-request: 20MB
        max-count: 3
        allowed-mimes: [image/jpeg, image/png, image/webp]
        allowed-exts: [jpg, jpeg, png, webp]

block-chain:
  sepolia:
    rpc-url: "${SEPOLIA_RPC_URL}"
    private-key: "${SEPOLIA_PRIVATE_KEY}"
    wallet-address: "${SEPOLIA_WALLET_ADDRESS}"
  contract-address:
    auction:
      factory: "${AUCTION_FACTORY_CONTRACT_ADDRESS}"
    tako-card-nft: "${TAKO_CARD_NFT_CONTRACT_ADDRESS}"

fcm:
  # Base64 로 인코딩된 서비스 계정 JSON (유일한 방식으로 사용).
  # 1) 파일 Base64 인코딩 후 환경변수 FIREBASE_SERVICE_ACCOUNT_B64 로 주입
  # 2) 여기서 ${FIREBASE_SERVICE_ACCOUNT_B64} 로 참조 (비어있으면 시작 실패)
  service-account:
    base64: ${FIREBASE_SERVICE_ACCOUNT_B64:}

push:
  web-icon: ${PUSH_WEB_ICON:/icon/fcm_icon_192.png}
  web-badge: ${PUSH_WEB_BADGE:/icon/fcm_icon_72.png}
  click-base-url: ${PUSH_CLICK_BASE_URL:/}
  android-channel-id: ${PUSH_ANDROID_CHANNEL_ID:default-channel}
  ios-sound: ${PUSH_IOS_SOUND:default}
